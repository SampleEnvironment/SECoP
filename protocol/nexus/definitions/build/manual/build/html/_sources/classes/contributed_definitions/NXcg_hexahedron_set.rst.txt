.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXcg_hexahedron_set.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXcg_hexahedron_set (base class)
    ! cg_hexahedron_set (base class)
    see: cg_hexahedron_set (base class); NXcg_hexahedron_set

.. _NXcg_hexahedron_set:

===================
NXcg_hexahedron_set
===================

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: Computational geometry description of a set of hexahedra in Euclidean space. ...

      Computational geometry description of a set of hexahedra in Euclidean space.

      The hexahedra do not have to be connected, can have different size,
      can intersect, and be rotated.
      This class can also be used to describe cuboids or cubes, axis-aligned or not.
      The class represents different access and description levels to offer both
      applied scientists and computational geometry experts to use the same
      base class but rather their specific view on the data:

      * Most simple many experimentalists wish to communicate dimensions/the size
        of specimens. In this case the alignment with axes is not relevant as
        eventually the only relevant information to convey is the volume of the 
        specimen.
      * In many cases, take for instance an experiment where a specimen was taken
        from a specifically deformed piece of material, e.g. cold-rolled,
        channel-die deformed, the orientation of the specimen edges with the
        experiment coordinate system can be of very high relevance.
        Examples include to know which specimen edge is parallel to the rolling,
        the transverse, or the normal direction.
      * Sufficient to pinpoint the sample and laboratory/experiment coordinate
        system, the above-mentioned descriptions are not detailed enough though
        to create a CAD model of the specimen.
      * Therefore, groups and fields for an additional, computational-geometry-
        based view of the hexahedra is offered which serve different computational
        tasks: storage-oriented simple views or detailed topological/graph-based
        descriptions.

      Hexahedra are important geometrical primitives, which are among the most
      frequently used elements in finite element meshing/modeling.

      Hexahedra have to be non-degenerated, closed, and built of polygons
      which are not self-intersecting.

      The term hexahedra will be used throughout this base class but includes
      the especially in engineering and more commonly used special cases,
      cuboid, cube, box, axis-aligned bounding box (AABB), optimal bounding
      box (OBB).

      An axis-aligned bounding box is a common data object in
      computational science and codes to represent a cuboid whose edges
      are aligned with a coordinate system. As a part of binary trees these
      are important data objects for time as well as space efficient queries
      of geometric primitives in techniques like kd-trees.

      An optimal bounding box is a common data object which provides the best
      tight fitting box about an arbitrary object. In general such boxes are
      rotated. Exact and substantially faster in practice approximate algorithms
      exist for computing optimal or near optimal bounding boxes for point sets.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **c**: The cardinality of the set, i.e. the number of hexahedra.

**Groups cited**:
  :ref:`NXcg_face_list_data_structure`, :ref:`NXcg_half_edge_data_structure`, :ref:`NXcg_unit_normal_set`, :ref:`NXorientation_set`, :ref:`NXtransformations`

.. index:: NXtransformations (base class); used in base class, NXorientation_set (base class); used in base class, NXcg_unit_normal_set (base class); used in base class, NXcg_face_list_data_structure (base class); used in base class, NXcg_half_edge_data_structure (base class); used in base class

**Structure**:

  .. _/NXcg_hexahedron_set/dimensionality-field:

  .. index:: dimensionality (field)

  **dimensionality**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 


    Obligatory value: ``3``

  .. _/NXcg_hexahedron_set/cardinality-field:

  .. index:: cardinality (field)

  **cardinality**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 


  .. _/NXcg_hexahedron_set/shape-field:

  .. index:: shape (field)

  **shape**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [c, 3]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    A qualitative description of each hexahedron/cuboid/cube/box.

  .. _/NXcg_hexahedron_set/length-field:

  .. index:: length (field)

  **length**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    .. collapse:: Qualifier how one edge is longer than all other edges of the hexahedra. ...

        Qualifier how one edge is longer than all other edges of the hexahedra.
        Often the term length is associated with one edge being parallel to
        an axis of the coordinate system.

  .. _/NXcg_hexahedron_set/width-field:

  .. index:: width (field)

  **width**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    .. collapse:: Qualifier often used to describe the length of an edge within ...

        Qualifier often used to describe the length of an edge within
        a specific coordinate system.

  .. _/NXcg_hexahedron_set/height-field:

  .. index:: height (field)

  **height**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    .. collapse:: Qualifier often used to describe the length of an edge within ...

        Qualifier often used to describe the length of an edge within
        a specific coordinate system.

  .. _/NXcg_hexahedron_set/center-field:

  .. index:: center (field)

  **center**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [c, 3]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    .. collapse:: Position of the geometric center, which often is but not necessarily ...

        Position of the geometric center, which often is but not necessarily
        has to be the center_of_mass of the hexahedrally-shaped sample/sample part.

  .. _/NXcg_hexahedron_set/volume-field:

  .. index:: volume (field)

  **volume**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_VOLUME <NX_VOLUME>`} 


  .. _/NXcg_hexahedron_set/surface_area-field:

  .. index:: surface_area (field)

  **surface_area**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_AREA <NX_AREA>`} 

    Total area (of all six faces) of each hexahedron.

  .. _/NXcg_hexahedron_set/face_area-field:

  .. index:: face_area (field)

  **face_area**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [c, 6]) {units=\ :ref:`NX_AREA <NX_AREA>`} 

    Area of each of the six faces of each hexahedron.

  .. _/NXcg_hexahedron_set/is_box-field:

  .. index:: is_box (field)

  **is_box**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` (Rank: 1, Dimensions: [c]) 

    .. collapse:: Specifies if the hexahedra represent cuboids or cubes eventually rotated ...

        Specifies if the hexahedra represent cuboids or cubes eventually rotated
        ones but at least not too exotic six-faced polyhedra.

  .. _/NXcg_hexahedron_set/is_axis_aligned-field:

  .. index:: is_axis_aligned (field)

  **is_axis_aligned**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` (Rank: 1, Dimensions: [c]) 

    .. collapse:: Only to be used if is_box is present. In this case, this field describes ...

        Only to be used if is_box is present. In this case, this field describes
        whether hexahedra are boxes whose primary edges are parallel to the
        axes of the Cartesian coordinate system.

  .. _/NXcg_hexahedron_set/identifier_offset-field:

  .. index:: identifier_offset (field)

  **identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer which specifies the first index to be used for distinguishing ...

        Integer which specifies the first index to be used for distinguishing
        hexahedra. Identifiers are defined either implicitly
        or explicitly. For implicit indexing the identifiers are defined on the
        interval [identifier_offset, identifier_offset+c-1].
        For explicit indexing the identifier array has to be defined.

        The identifier_offset field can for example be used to communicate if the
        identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
        or from 0 (referred to as C-, Python-style index notation) respectively.

  .. _/NXcg_hexahedron_set/identifier-field:

  .. index:: identifier (field)

  **identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer used to distinguish hexahedra for explicit indexing.

  .. _/NXcg_hexahedron_set/TRANSFORMATIONS-group:

  **TRANSFORMATIONS**: (optional) :ref:`NXtransformations` 

    .. collapse:: Reference to or definition of a coordinate system with ...

        Reference to or definition of a coordinate system with
        which the qualifiers and mesh data are interpretable.

  .. _/NXcg_hexahedron_set/orientation-group:

  **orientation**: (optional) :ref:`NXorientation_set` 


  .. _/NXcg_hexahedron_set/vertex_normal-group:

  **vertex_normal**: (optional) :ref:`NXcg_unit_normal_set` 


  .. _/NXcg_hexahedron_set/edge_normal-group:

  **edge_normal**: (optional) :ref:`NXcg_unit_normal_set` 


  .. _/NXcg_hexahedron_set/face_normal-group:

  **face_normal**: (optional) :ref:`NXcg_unit_normal_set` 


  .. _/NXcg_hexahedron_set/hexahedra-group:

  **hexahedra**: (optional) :ref:`NXcg_face_list_data_structure` 

    .. collapse:: A simple approach to describe the entire set of hexahedra when the ...

        A simple approach to describe the entire set of hexahedra when the
        main intention is to store the shape of the hexahedra for visualization.

  .. _/NXcg_hexahedron_set/hexahedron-group:

  **hexahedron**: (optional) :ref:`NXcg_face_list_data_structure` 

    Disentangled representations of the mesh of specific hexahedra.

  .. _/NXcg_hexahedron_set/hexahedron_half_edge-group:

  **hexahedron_half_edge**: (optional) :ref:`NXcg_half_edge_data_structure` 

    .. collapse:: Disentangled representation of the planar graph that each hexahedron ...

        Disentangled representation of the planar graph that each hexahedron
        represents. Such a description simplifies topological processing
        or analyses of mesh primitive operations and neighborhood queries.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXcg_hexahedron_set/cardinality-field </NXcg_hexahedron_set/cardinality-field>`
* :ref:`/NXcg_hexahedron_set/center-field </NXcg_hexahedron_set/center-field>`
* :ref:`/NXcg_hexahedron_set/dimensionality-field </NXcg_hexahedron_set/dimensionality-field>`
* :ref:`/NXcg_hexahedron_set/edge_normal-group </NXcg_hexahedron_set/edge_normal-group>`
* :ref:`/NXcg_hexahedron_set/face_area-field </NXcg_hexahedron_set/face_area-field>`
* :ref:`/NXcg_hexahedron_set/face_normal-group </NXcg_hexahedron_set/face_normal-group>`
* :ref:`/NXcg_hexahedron_set/height-field </NXcg_hexahedron_set/height-field>`
* :ref:`/NXcg_hexahedron_set/hexahedra-group </NXcg_hexahedron_set/hexahedra-group>`
* :ref:`/NXcg_hexahedron_set/hexahedron-group </NXcg_hexahedron_set/hexahedron-group>`
* :ref:`/NXcg_hexahedron_set/hexahedron_half_edge-group </NXcg_hexahedron_set/hexahedron_half_edge-group>`
* :ref:`/NXcg_hexahedron_set/identifier-field </NXcg_hexahedron_set/identifier-field>`
* :ref:`/NXcg_hexahedron_set/identifier_offset-field </NXcg_hexahedron_set/identifier_offset-field>`
* :ref:`/NXcg_hexahedron_set/is_axis_aligned-field </NXcg_hexahedron_set/is_axis_aligned-field>`
* :ref:`/NXcg_hexahedron_set/is_box-field </NXcg_hexahedron_set/is_box-field>`
* :ref:`/NXcg_hexahedron_set/length-field </NXcg_hexahedron_set/length-field>`
* :ref:`/NXcg_hexahedron_set/orientation-group </NXcg_hexahedron_set/orientation-group>`
* :ref:`/NXcg_hexahedron_set/shape-field </NXcg_hexahedron_set/shape-field>`
* :ref:`/NXcg_hexahedron_set/surface_area-field </NXcg_hexahedron_set/surface_area-field>`
* :ref:`/NXcg_hexahedron_set/TRANSFORMATIONS-group </NXcg_hexahedron_set/TRANSFORMATIONS-group>`
* :ref:`/NXcg_hexahedron_set/vertex_normal-group </NXcg_hexahedron_set/vertex_normal-group>`
* :ref:`/NXcg_hexahedron_set/volume-field </NXcg_hexahedron_set/volume-field>`
* :ref:`/NXcg_hexahedron_set/width-field </NXcg_hexahedron_set/width-field>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/contributed_definitions/NXcg_hexahedron_set.nxdl.xml
