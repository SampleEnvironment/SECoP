.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXstage_lab.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXstage_lab (base class)
    ! stage_lab (base class)
    see: stage_lab (base class); NXstage_lab

.. _NXstage_lab:

===========
NXstage_lab
===========

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: A stage lab can be used to hold, align, orient, and prepare a specimen. ...

      A stage lab can be used to hold, align, orient, and prepare a specimen.

      Modern stages are multi-functional devices. Many of which offer a controlled
      environment around (a part) of the specimen. Stages enable experimentalists
      to apply stimuli. A stage_lab is a multi-purpose/-functional tools which
      can have multiple actuators, sensors, and other components.

      With such stages comes the need for storing various (meta)data 
      that are generated while manipulating the sample.

      Modern stages realize a hierarchy of components: For example the specimen
      might be mounted on a multi-axial tilt rotation holder. This holder is 
      fixed in the support unit which connects the holder to the rest of the
      microscope.

      In other examples, taken from atom probe microscopy, researchers may work
      with wire samples which are clipped into a larger fixing unit for
      convenience and enable for a more careful specimen handling.
      This fixture unit is known in atom probe jargon as a stub.
      Stubs in turn are positioned onto pucks.
      Pucks are then loaded onto carousels.
      A carousel is a carrier unit with which eventually entire sets of specimens
      can be moved in between parts of the microscope.

      An NXstage_lab instance reflects this hierarchical design. The stage is the 
      root of the hierarchy. A stage carries the holder.
      In the case that it is not practical to distinguish these two layers,
      the holder should be given preference.

      Some examples for stage_labs in applications:

      * A nanoparticle on a copper grid. The copper grid is the holder.  
        The grid itself is fixed to the stage.  
      * An atom probe specimen fixed in a stub. In this case the stub can be  
        considered the holder, while the cryostat temperature control unit is  
        a component of the stage.  
      * Samples with arrays of specimens, like a microtip on a microtip array  
        is an example of a three-layer hierarchy commonly employed for  
        efficient sequential processing of atom probe experiments.  
      * With one entry of an application definition only one microtip should be  
        described. Therefore, the microtip is the specimen,  
        the array is the holder and the remaining mounting unit  
        that is attached to the cryo-controller is the stage.  
      * For in-situ experiments with e.g. chips with read-out electronics  
        as actuators, the chips are again placed in a larger unit.  
      * Other examples are (quasi) in-situ experiments where experimentalists  
        anneal or deform the specimen via e.g. in-situ tensile testing machines  
        which are mounted on the specimen holder.

      To cover for an as flexible design of complex stages, users should nest
      multiple instances of NXstage_lab objects according to their needs to reflect
      the differences between what they consider as the holder and what 
      they consider is the stage.

      Instances should be named with integers starting from 1 as the top level unit.
      In the microtip example stage_lab_1 for the stage, stage_lab_2 for the holder
      (microtip array), stage_lab_3 for the microtip specimen, respectively. 
      The depends_on keyword should be used with relative or absolute naming inside
      the file to specify how different stage_lab instances build a hierarchy
      if this is not obvious from numbered identifiers like the stage_lab_1 to 
      stage_lab 3 example. The lower it is the number the higher it is the
      rank in the hierarchy.

      For specific details and inspiration about stages in electron microscopes:

      * `Holders with multiple axes <https://www.nanotechnik.com/e5as.html>`_  
      * `Chip-based designs <https://www.protochips.com/products/fusion/fusion-select-components/>`_  
      * `Further chip-based designs <https://www.nanoprobetech.com/about>`_
      * `Stages in transmission electron microscopy <https://doi.org/10.1007/978-3-662-14824-2>`_ (page 103, table 4.2)  
      * `Further stages in transmission electron microscopy <https://doi.org/10.1007/978-1-4757-2519-3>`_ (page 124ff)
      * `Specimens in atom probe <https://doi.org/10.1007/978-1-4614-8721-0>`_ (page 47ff)
      * `Exemplar micro-manipulators <https://nano.oxinst.com/products/omniprobe/omniprobe-200>`_

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXfabrication`, :ref:`NXpositioner`, :ref:`NXtransformations`

.. index:: NXfabrication (base class); used in base class, NXtransformations (base class); used in base class, NXpositioner (base class); used in base class

**Structure**:

  .. _/NXstage_lab/design-field:

  .. index:: design (field)

  **design**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: Principal design of the stage. ...

        Principal design of the stage.

        Exemplar terms could be side_entry, top_entry,
        single_tilt, quick_change, multiple_specimen,
        bulk_specimen, double_tilt, tilt_rotate,
        heating_chip, atmosphere_chip,
        electrical_biasing_chip, liquid_cell_chip

  .. _/NXstage_lab/name-field:

  .. index:: name (field)

  **name**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    Given name/alias for the components making the stage.

  .. _/NXstage_lab/description-field:

  .. index:: description (field)

  **description**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: Ideally, a (globally) unique persistent identifier, link, ...

        Ideally, a (globally) unique persistent identifier, link,
        or text to a resource which gives further details.

  .. _/NXstage_lab/tilt_1-field:

  .. index:: tilt_1 (field)

  **tilt_1**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

    Should be defined by the application definition.

  .. _/NXstage_lab/tilt_2-field:

  .. index:: tilt_2 (field)

  **tilt_2**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

    Should be defined by the application definition.

  .. _/NXstage_lab/rotation-field:

  .. index:: rotation (field)

  **rotation**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

    Should be defined by the application definition.

  .. _/NXstage_lab/position-field:

  .. index:: position (field)

  **position**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` (Rank: 1, Dimensions: [3]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    Should be defined by the application definition.

  .. _/NXstage_lab/bias_voltage-field:

  .. index:: bias_voltage (field)

  **bias_voltage**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_VOLTAGE <NX_VOLTAGE>`} 

    Voltage applied to the stage to decelerate electrons.

  .. _/NXstage_lab/FABRICATION-group:

  **FABRICATION**: (optional) :ref:`NXfabrication` 


  .. _/NXstage_lab/TRANSFORMATIONS-group:

  **TRANSFORMATIONS**: (optional) :ref:`NXtransformations` 

    .. collapse:: The rotation, tilt and position of stage components can be specified ...

        The rotation, tilt and position of stage components can be specified
        either via NXtransformations or via the tilt_1, tilt_2, rotation, 
        and position fields.

  .. _/NXstage_lab/POSITIONER-group:

  **POSITIONER**: (optional) :ref:`NXpositioner` 



Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXstage_lab/bias_voltage-field </NXstage_lab/bias_voltage-field>`
* :ref:`/NXstage_lab/description-field </NXstage_lab/description-field>`
* :ref:`/NXstage_lab/design-field </NXstage_lab/design-field>`
* :ref:`/NXstage_lab/FABRICATION-group </NXstage_lab/FABRICATION-group>`
* :ref:`/NXstage_lab/name-field </NXstage_lab/name-field>`
* :ref:`/NXstage_lab/position-field </NXstage_lab/position-field>`
* :ref:`/NXstage_lab/POSITIONER-group </NXstage_lab/POSITIONER-group>`
* :ref:`/NXstage_lab/rotation-field </NXstage_lab/rotation-field>`
* :ref:`/NXstage_lab/tilt_1-field </NXstage_lab/tilt_1-field>`
* :ref:`/NXstage_lab/tilt_2-field </NXstage_lab/tilt_2-field>`
* :ref:`/NXstage_lab/TRANSFORMATIONS-group </NXstage_lab/TRANSFORMATIONS-group>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/contributed_definitions/NXstage_lab.nxdl.xml
