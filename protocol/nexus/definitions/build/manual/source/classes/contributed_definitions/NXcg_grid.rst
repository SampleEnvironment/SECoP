.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXcg_grid.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXcg_grid (base class)
    ! cg_grid (base class)
    see: cg_grid (base class); NXcg_grid

.. _NXcg_grid:

=========
NXcg_grid
=========

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: Computational geometry description of a Wigner-Seitz cell grid in Euclidean spac ...

      Computational geometry description of a Wigner-Seitz cell grid in Euclidean space.

      Frequently convenient three-dimensional grids with cubic cells are used.
      Exemplar applications are spectral-solver based crystal plasticity
      and stencil methods like phase-field or cellular automata.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **d**: The dimensionality of the grid.

  **c**: The cardinality or total number of cells/grid points.

  **n_b**: Number of boundaries of the bounding box or primitive to the grid.

**Groups cited**:
  :ref:`NXcg_polyhedron_set`, :ref:`NXtransformations`

.. index:: NXtransformations (base class); used in base class, NXcg_polyhedron_set (base class); used in base class

**Structure**:

  .. _/NXcg_grid/dimensionality-field:

  .. index:: dimensionality (field)

  **dimensionality**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 


    Any of these values: ``1`` | ``2`` | ``3``

  .. _/NXcg_grid/cardinality-field:

  .. index:: cardinality (field)

  **cardinality**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 


  .. _/NXcg_grid/origin-field:

  .. index:: origin (field)

  **origin**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [d]) 


  .. _/NXcg_grid/symmetry-field:

  .. index:: symmetry (field)

  **symmetry**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: The symmetry of the lattice defining the shape of the unit cell. ...

        The symmetry of the lattice defining the shape of the unit cell.

        Obligatory value: ``cubic``

  .. _/NXcg_grid/cell_dimensions-field:

  .. index:: cell_dimensions (field)

  **cell_dimensions**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [d]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    The unit cell dimensions using crystallographic notation.

  .. _/NXcg_grid/extent-field:

  .. index:: extent (field)

  **extent**: (optional) :ref:`NX_POSINT <NX_POSINT>` (Rank: 1, Dimensions: [d]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Number of unit cells along each of the d unit vectors. ...

        Number of unit cells along each of the d unit vectors.
        The total number of cells, or grid points has to be the cardinality.
        If the grid has an irregular number of grid positions in each direction,
        as it could be for instance the case of a grid where all grid points
        outside some masking primitive are removed, this extent field should
        not be used. Instead use the coordinate field.

  .. _/NXcg_grid/identifier_offset-field:

  .. index:: identifier_offset (field)

  **identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer which specifies the first index to be used for distinguishing ...

        Integer which specifies the first index to be used for distinguishing
        identifiers for cells. Identifiers are defined either implicitly
        or explicitly. For implicit indexing the identifiers are defined on the
        interval [identifier_offset, identifier_offset+c-1].
        For explicit indexing the identifier array has to be defined.

        The identifier_offset field can for example be used to communicate if the
        identifiers are expected to start from 1 (referred to as Fortran-/Matlab-)
        or from 0 (referred to as C-, Python-style index notation) respectively.

  .. _/NXcg_grid/identifier-field:

  .. index:: identifier (field)

  **identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer used to distinguish cells for explicit indexing.

  .. _/NXcg_grid/position-field:

  .. index:: position (field)

  **position**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [c, d]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    Position of each cell in Euclidean space.

  .. _/NXcg_grid/coordinate-field:

  .. index:: coordinate (field)

  **coordinate**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [c, d]) {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

    Coordinate of each cell with respect to the discrete grid.

  .. _/NXcg_grid/number_of_boundaries-field:

  .. index:: number_of_boundaries (field)

  **number_of_boundaries**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: How many distinct boundaries are distinguished? ...

        How many distinct boundaries are distinguished?
        Most grids discretize a cubic or cuboidal region. In this case
        six sides can be distinguished, each making an own boundary.

  .. _/NXcg_grid/boundaries-field:

  .. index:: boundaries (field)

  **boundaries**: (optional) :ref:`NX_CHAR <NX_CHAR>` (Rank: 1, Dimensions: [n_b]) 

    .. collapse:: Name of domain boundaries of the simulation box/ROI e.g. left, right, ...

        Name of domain boundaries of the simulation box/ROI e.g. left, right,
        front, back, bottom, top.

  .. _/NXcg_grid/boundary_conditions-field:

  .. index:: boundary_conditions (field)

  **boundary_conditions**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_b]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: The boundary conditions for each boundary: ...

        The boundary conditions for each boundary:

        0 - undefined
        1 - open
        2 - periodic
        3 - mirror
        4 - von Neumann
        5 - Dirichlet

  .. _/NXcg_grid/TRANSFORMATIONS-group:

  **TRANSFORMATIONS**: (optional) :ref:`NXtransformations` 

    .. collapse:: Reference to or definition of a coordinate system with ...

        Reference to or definition of a coordinate system with
        which the positions and directions are interpretable.

  .. _/NXcg_grid/bounding_box-group:

  **bounding_box**: (optional) :ref:`NXcg_polyhedron_set` 

    A tight bounding box or sphere or bounding primitive about the grid.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXcg_grid/boundaries-field </NXcg_grid/boundaries-field>`
* :ref:`/NXcg_grid/boundary_conditions-field </NXcg_grid/boundary_conditions-field>`
* :ref:`/NXcg_grid/bounding_box-group </NXcg_grid/bounding_box-group>`
* :ref:`/NXcg_grid/cardinality-field </NXcg_grid/cardinality-field>`
* :ref:`/NXcg_grid/cell_dimensions-field </NXcg_grid/cell_dimensions-field>`
* :ref:`/NXcg_grid/coordinate-field </NXcg_grid/coordinate-field>`
* :ref:`/NXcg_grid/dimensionality-field </NXcg_grid/dimensionality-field>`
* :ref:`/NXcg_grid/extent-field </NXcg_grid/extent-field>`
* :ref:`/NXcg_grid/identifier-field </NXcg_grid/identifier-field>`
* :ref:`/NXcg_grid/identifier_offset-field </NXcg_grid/identifier_offset-field>`
* :ref:`/NXcg_grid/number_of_boundaries-field </NXcg_grid/number_of_boundaries-field>`
* :ref:`/NXcg_grid/origin-field </NXcg_grid/origin-field>`
* :ref:`/NXcg_grid/position-field </NXcg_grid/position-field>`
* :ref:`/NXcg_grid/symmetry-field </NXcg_grid/symmetry-field>`
* :ref:`/NXcg_grid/TRANSFORMATIONS-group </NXcg_grid/TRANSFORMATIONS-group>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/contributed_definitions/NXcg_grid.nxdl.xml
