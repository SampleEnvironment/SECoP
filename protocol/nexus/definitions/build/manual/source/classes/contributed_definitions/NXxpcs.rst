.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXxpcs.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXxpcs (application definition)
    ! xpcs (application definition)
    see: xpcs (application definition); NXxpcs

.. _NXxpcs:

======
NXxpcs
======

**Status**:

  application definition, extends :ref:`NXobject`

**Description**:

  .. collapse:: X-ray Photon Correlation Spectroscopy (XPCS) data (results). ...

      X-ray Photon Correlation Spectroscopy (XPCS) data (results).

      The purpose of ``NXxpcs`` is to document and communicate an accepted vernacular for various XPCS results data
      in order to support development of community software tools.  The definition presented here only
      represents a starting point and contains fields that a common software tool should support for
      community acceptance.

      Additional fields may be added to XPCS results file (either formally or informally).  It is expected
      that this XPCS data will be part of multi-modal data set that could involve e.g., :ref:`NXcanSAS` or
      1D and/or 2D data.

**Symbols**:

  The symbol(s) listed here will be used below to coordinate datasets with the same shape.

  **nP**: Number of points

**Groups cited**:
  :ref:`NXbeam`, :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXnote`, :ref:`NXpositioner`, :ref:`NXprocess`, :ref:`NXsample`

.. index:: NXentry (base class); used in application definition, NXdata (base class); used in application definition, NXinstrument (base class); used in application definition, NXbeam (base class); used in application definition, NXdetector (base class); used in application definition, NXnote (base class); used in application definition, NXsample (base class); used in application definition, NXpositioner (base class); used in application definition, NXprocess (base class); used in application definition

**Structure**:

  .. _/NXxpcs/entry-group:

  **entry**: (required) :ref:`NXentry` 


    .. _/NXxpcs/entry/definition-field:

    .. index:: definition (field)

    **definition**: (required) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXentry/definition-field>`

      .. collapse:: Official NeXus NXDL schema to which this file conforms ...

          Official NeXus NXDL schema to which this file conforms

          Obligatory value: ``NXxpcs``

    .. _/NXxpcs/entry/entry_identifier-field:

    .. index:: entry_identifier (field)

    **entry_identifier**: (required) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXentry/entry_identifier-field>`

      .. collapse:: **Locally** unique identifier for the experiment (a.k.a. run or scan). ...

          **Locally** unique identifier for the experiment (a.k.a. run or scan).

          * For bluesky users, this is the run's `"scan_id"`.
          * For SPEC users, this is the scan number (``SCAN_N``).

    .. _/NXxpcs/entry/entry_identifier_uuid-field:

    .. index:: entry_identifier_uuid (field)

    **entry_identifier_uuid**: (optional) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXentry/entry_identifier_uuid-field>`

      .. collapse:: (optional) UUID identifier for this entry. ...

          (optional) UUID identifier for this entry.

          See the `UUID standard <https://www.rfc-editor.org/rfc/rfc4122.html>`__ (or
          `wikipedia <https://en.wikipedia.org/wiki/Universally_unique_identifier>`__)
          for more information.

          * For `bluesky <https://blueskyproject.io/>`__ users, this is the
            run's `"uid"` and is expected for that application.
          * Typically, `SPEC <https://certif.com/content/spec/>`__ users will
            not use this field without further engineering.

    .. _/NXxpcs/entry/scan_number-field:

    .. index:: scan_number (field)

    **scan_number**: (required) :ref:`NX_INT <NX_INT>` 


      .. index:: deprecated


      **DEPRECATED**: Use the ``entry_identifier`` field.

      .. collapse:: Scan number (must be an integer). ...

          Scan number (must be an integer).

          NOTE: Link to collection_identifier.

    .. _/NXxpcs/entry/start_time-field:

    .. index:: start_time (field)

    **start_time**: (required) :ref:`NX_DATE_TIME <NX_DATE_TIME>` :ref:`⤆ </NXentry/start_time-field>`

      Starting time of experiment, such as "2021-02-11 11:22:33.445566Z".

    .. _/NXxpcs/entry/end_time-field:

    .. index:: end_time (field)

    **end_time**: (optional) :ref:`NX_DATE_TIME <NX_DATE_TIME>` :ref:`⤆ </NXentry/end_time-field>`

      Ending time of experiment, such as "2021-02-11 11:23:45Z".

    .. _/NXxpcs/entry/data-group:

    **data**: (required) :ref:`NXdata` :ref:`⤆ </NXentry/DATA-group>`

      .. collapse:: The results data captured here are most commonly required for high throughpu ...

          The results data captured here are most commonly required for high throughput, equilibrium dynamics experiments. Data (results)
          describing on-equilibrium dynamics consume more memory resources so these data are separated.

      .. _/NXxpcs/entry/data/frame_sum-field:

      .. index:: frame_sum (field)

      **frame_sum**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_COUNT <NX_COUNT>`} 

        .. collapse:: Two-dimensional summation along the frames stack. ...

            Two-dimensional summation along the frames stack.

            sum of intensity v. time (in the units of "frames")

      .. _/NXxpcs/entry/data/frame_average-field:

      .. index:: frame_average (field)

      **frame_average**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_COUNT <NX_COUNT>`} 

        .. collapse:: Two-dimensional average along the frames stack. ...

            Two-dimensional average along the frames stack.

            average intensity v. time (in the units of "frames")

      .. _/NXxpcs/entry/data/g2-field:

      .. index:: g2 (field)

      **g2**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: normalized intensity auto-correlation function, see Lumma, Rev. Sci. Instr ...

            normalized intensity auto-correlation function, see Lumma, Rev. Sci. Instr. (2000), Eq 1

            ..  math:: g_2(\boldsymbol Q,t) = \frac{ \langle I(\boldsymbol Q,t\prime) I(\boldsymbol Q,t\prime + t) \rangle }{ \langle I(\boldsymbol Q,t\prime)\rangle^2 }; t > 0

            Typically, :math:`g_2` is a quantity calculated for a group of pixels representing a specific
            region of reciprocal space.  These groupings, or bins, are generically described as :math:`q`. Some
            open-source XPCS libraries refer to these bins as "rois", which are not to be confused with
            EPICS AreaDetector ROI. See usage guidelines for q_lists and roi_maps within a mask.  [#]_

            In short, :math:`g_2` should be ordered according to the roi_map value.  In principle, any format is acceptable if
            the data and its axes are self-describing as per NeXus recommendations. However, the data is preferred in one
            of the following two formats:

            * iterable list of linked files (or keys) for each :math:`g_2` with 1 file (key) per :math:`q`, where `q` is called by the nth roi_map value
            * 2D array [#]_ with shape (:math:`g_2`, :math:`q`), where `q` is represented by the nth roi_map value, not the value `q` value

            Note it is expected that "g2" and all quantities following it will be of the same length.

            Other formats are acceptable with sufficient axes description.

            See references below for related implementation information:

            .. [#] mask: ``NXxpcs:/entry/instrument/masks-group``
            .. [#] NeXus 2-D data and axes: https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata

        .. _/NXxpcs/entry/data/g2@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 

          .. collapse:: storage_mode describes the format of the data to be loaded ...

              storage_mode describes the format of the data to be loaded

              We encourage the documentation of other formats not represented here.

              * one array representing entire data set ("one_array")
              * data exchange format with each key representing one ``q`` by its corresponding roi_map value ("data_exchange_keys")

              Any of these values: ``one_array`` | ``data_exchange_keys`` | ``other``

      .. _/NXxpcs/entry/data/g2_derr-field:

      .. index:: g2_derr (field)

      **g2_derr**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: error values for the :math:`g_2` values. ...

            error values for the :math:`g_2` values.

            The derivation of the error is left up to the implemented code. Symmetric error will be
            expected (:math:`\pm` error).  The data should be in the same format as ``g2``.

        .. _/NXxpcs/entry/data/g2_derr@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values: ``one_array`` | ``data_exchange_keys`` | ``other``

      .. _/NXxpcs/entry/data/G2_unnormalized-field:

      .. index:: G2_unnormalized (field)

      **G2_unnormalized**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANY <NX_ANY>`} 

        .. collapse:: unnormalized intensity auto-correlation function. ...

            unnormalized intensity auto-correlation function.

            Specifically, ``g2`` without the denominator.  The data should be in the same format as ``g2``.


        .. _/NXxpcs/entry/data/G2_unnormalized@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values: ``one_array`` | ``data_exchange_keys`` | ``other``

      .. _/NXxpcs/entry/data/delay_difference-field:

      .. index:: delay_difference (field)

      **delay_difference**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_COUNT <NX_COUNT>`} 

        .. collapse:: delay_difference (also known as delay or lag step) ...

            delay_difference (also known as delay or lag step)

            This is quantized difference so that the "step" between two consecutive
            frames is one frame (or step ``= dt = 1 frame``)

            It is the "quantized" delay time corresponding to the ``g2`` values.

            The unit of delay_differences is ``NX_INT`` for units of frames (i.e., integers) preferred,
            refer to :ref:`NXdetector` for conversion to time units.

        .. _/NXxpcs/entry/data/delay_difference@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values: ``one_array`` | ``data_exchange_keys`` | ``other``

    .. _/NXxpcs/entry/twotime-group:

    **twotime**: (optional) :ref:`NXdata` :ref:`⤆ </NXentry/DATA-group>`

      The data (results) in this section are based on the two-time intensity correlation function derived from a time series of scattering images.

      .. _/NXxpcs/entry/twotime/two_time_corr_func-field:

      .. index:: two_time_corr_func (field)

      **two_time_corr_func**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANY <NX_ANY>`} 

        .. collapse:: two-time correlation of speckle intensity for a given q-bin or roi (repres ...

            two-time correlation of speckle intensity for a given q-bin or roi (represented by the nth roi_map value)

            See Fluerasu, Phys Rev E (2007), Eq 1 and Sutton, Optics Express (2003) for an early
            description applied to X-ray scattering:

            .. math:: C(\boldsymbol Q, t_1, t_2) = \frac{ \langle I(\boldsymbol Q, t_1)I(\boldsymbol Q, t_2)\rangle }{ \langle I(\boldsymbol Q,t_1)\rangle \langle I(\boldsymbol Q,t_2)\rangle }

            in which time is quantized by frames. In principle, any data format is acceptable if
            the data and its axes are self-describing as per NeXus recommendations. However, the data is preferred in one
            of the following two formats:

            * iterable list of linked files (or keys) for each q-bin called by the nth roi_map value. data for each bin is a 2D array
            * 3D array with shape (frames, frames, q) or (q, frames, frames), where :math:`q` is represented by the nth roi_map value, not the value `q` value

            The computation of this result can be customized.  These customizations can affect subsequently derived results (below).  The
            following attributes will be used to manage the customization.

            * Other normalization methods may be applied, but the method will not be specified in this
              definition. Some of these normalization methods result in a baseline value of ``0``, not ``1``.

            * The various software libraries use different programming languages.  Therefore, we need to
              specify the ``time = 0`` origin location of the 2D array for each :math:`q`.

            * A method to reduce data storage needs is to only record half of the 2D array by populating
              array elements above or below the array diagonal.


        .. _/NXxpcs/entry/twotime/two_time_corr_func@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 

          .. collapse:: storage_mode describes the format of the data to be loaded ...

              storage_mode describes the format of the data to be loaded

              We encourage the documention of other formats represented here.

              Any of these values:

                * ``one_array_q_first``

                * ``one_array_q_last``

                * ``data_exchange_keys``

                * ``other``


        .. _/NXxpcs/entry/twotime/two_time_corr_func@baseline_reference-attribute:

        .. index:: baseline_reference (field attribute)

        **@baseline_reference**: (required) :ref:`NX_INT <NX_INT>` 

          .. collapse:: baseline is the expected value of a full decorrelation ...

              baseline is the expected value of a full decorrelation

              The baseline is a constant value added to the functional form of the auto-correlation
              function. This value is required.

              Any of these values: ``0`` | ``1``

        .. _/NXxpcs/entry/twotime/two_time_corr_func@time_origin_location-attribute:

        .. index:: time_origin_location (field attribute)

        **@time_origin_location**: (required) :ref:`NX_CHAR <NX_CHAR>` 

          .. collapse:: time_origin_location is the location of the origin ...

              time_origin_location is the location of the origin

              Any of these values: ``upper_left`` | ``lower_left``

        .. _/NXxpcs/entry/twotime/two_time_corr_func@populated_elements-attribute:

        .. index:: populated_elements (field attribute)

        **@populated_elements**: (required) :ref:`NX_CHAR <NX_CHAR>` 

          .. collapse:: populated_elements describe the elements of the 2D array that are popula ...

              populated_elements describe the elements of the 2D array that are populated with data

              Any of these values: ``all`` | ``upper_half`` | ``lower_half``

      .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func-field:

      .. index:: g2_from_two_time_corr_func (field)

      **g2_from_two_time_corr_func**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: frame weighted average along the diagonal direction in ``two_time_corr_fun ...

            frame weighted average along the diagonal direction in ``two_time_corr_func``

            The data format and description should be consistent with that found in "/NXxpcs/entry/data/g2"

            * iterable list of linked files for each :math:`g_2` with 1 file per :math:`q`
            * 2D array with shape (:math:`g_2`, :math:`q`)

            Note that delay_difference is not included here because it is derived from the shape of
            extracted :math:`g_2` because all frames are considered, which is not necessarily the case for :math:`g_2`.

            The computation of this result can be customized.  The customization can affect the fitting required to extract quantitative results.  The
            following attributes will be used to manage the customization.


        .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values:

            * ``one_array_q_first``

            * ``one_array_q_last``

            * ``data_exchange_keys``

            * ``other``


        .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func@baseline_reference-attribute:

        .. index:: baseline_reference (field attribute)

        **@baseline_reference**: (required) :ref:`NX_INT <NX_INT>` 


          Any of these values: ``0`` | ``1``

        .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func@first_point_for_fit-attribute:

        .. index:: first_point_for_fit (field attribute)

        **@first_point_for_fit**: (required) :ref:`NX_INT <NX_INT>` 

          .. collapse:: first_point_for_fit describes if the first point should or should not be ...

              first_point_for_fit describes if the first point should or should not be used in fitting the functional form of the dynamics to extract quantitative time-scale information.

              The first_point_for_fit is True ("1") or False ("0"). This value is required.

              Any of these values: ``0`` | ``1``

      .. _/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func-field:

      .. index:: g2_err_from_two_time_corr_func (field)

      **g2_err_from_two_time_corr_func**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: error values for the :math:`g_2` values. ...

            error values for the :math:`g_2` values.

            The derivation of the error is left up to the implemented code. Symmetric error will be
            expected (:math:`\pm` error).

        .. _/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values:

            * ``one_array_q_first``

            * ``one_array_q_last``

            * ``data_exchange_keys``

            * ``other``


      .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials-field:

      .. index:: g2_from_two_time_corr_func_partials (field)

      **g2_from_two_time_corr_func_partials**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: subset of frame weighted average along the diagonal direction in ``two_tim ...

            subset of frame weighted average along the diagonal direction in ``two_time_corr_func``

            Time slicing along the diagonal can be very sophisticated.  This entry currently assumes
            equal frame-binning. The data formats are highly dependent on the implantation of various analysis libraries.
            In principle, any data format is acceptable if the data and its axes are self describing as per NeXus
            recommendations. However, the data is preferred in one of the following two formats:

            * iterable list of linked files (or keys) for each partial :math:`g_2` of each q-bin represented by the roi_map value
            * 3D array with shape (:math:`g_2`, :math:`q`, nth_partial)

            Note that delay_difference is not included here because it is derived from the shape of
            extracted :math:`g_2`.


        .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@storage_mode-attribute:

        .. index:: storage_mode (field attribute)

        **@storage_mode**: (required) :ref:`NX_CHAR <NX_CHAR>` 


          Any of these values: ``one_array`` | ``data_exchange_keys`` | ``other``

        .. _/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@baseline_reference-attribute:

        .. index:: baseline_reference (field attribute)

        **@baseline_reference**: (required) :ref:`NX_INT <NX_INT>` 


          Any of these values: ``0`` | ``1``

      .. _/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func_partials-field:

      .. index:: g2_err_from_two_time_corr_func_partials (field)

      **g2_err_from_two_time_corr_func_partials**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

        .. collapse:: error values for the :math:`g_2` values. ...

            error values for the :math:`g_2` values.

            The derivation of the error is left up to the implemented code. Symmetric error will be
            expected (:math:`\pm` error).

    .. _/NXxpcs/entry/instrument-group:

    **instrument**: (required) :ref:`NXinstrument` :ref:`⤆ </NXentry/INSTRUMENT-group>`

      .. collapse:: XPCS instrument Metadata. ...

          XPCS instrument Metadata.

          Objects can be entered here directly or linked from other
          objects in the NeXus file (such as within ``/entry/instrument``).

      .. _/NXxpcs/entry/instrument/incident_beam-group:

      **incident_beam**: (required) :ref:`NXbeam` :ref:`⤆ </NXinstrument/BEAM-group>`


        .. _/NXxpcs/entry/instrument/incident_beam/incident_energy-field:

        .. index:: incident_energy (field)

        **incident_energy**: (required) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`} :ref:`⤆ </NXbeam/incident_energy-field>`

          Incident beam line energy (either keV or eV).

        .. _/NXxpcs/entry/instrument/incident_beam/incident_energy_spread-field:

        .. index:: incident_energy_spread (field)

        **incident_energy_spread**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`} 

          .. collapse:: Spread of incident beam line energy (either keV or eV). This quantity is ...

              Spread of incident beam line energy (either keV or eV). This quantity is otherwise known
              as the energy resolution, which is related to the longitudinal coherence length.

        .. _/NXxpcs/entry/instrument/incident_beam/incident_polarization_type-field:

        .. index:: incident_polarization_type (field)

        **incident_polarization_type**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

          .. collapse:: Terse description of the incident beam polarization. ...

              Terse description of the incident beam polarization.

              The value can be plain text, such as ``vertical``, ``C+``,
              ``circular left``.

        .. _/NXxpcs/entry/instrument/incident_beam/extent-field:

        .. index:: extent (field)

        **extent**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} :ref:`⤆ </NXbeam/extent-field>`

          Size (2-D) of the beam at this position.

      .. _/NXxpcs/entry/instrument/DETECTOR-group:

      **DETECTOR**: (required) :ref:`NXdetector` :ref:`⤆ </NXinstrument/DETECTOR-group>`

        .. collapse:: XPCS data is typically produced by area detector (likely EPICS AreaDetecto ...

            XPCS data is typically produced by area detector (likely EPICS AreaDetector) as a stack of 2D images. Sometimes
            this data is represented in different ways (sparse arrays or photon event list), but this detail
            is left to the analysis software.  Therefore, we only include requirements based on full array data.

            We note that the image origin (pixel coordinates (0,0)) are found at the top left of a single 2D image array. This
            is the standard expected by Coherent X-ray Imaging Data Bank. [#]_
            See CXI version 1.6 and Maia, Nature Methods (2012).  This seems to be consistent with matplotlib and
            the practiced implementation of EPICS AreaDetector.  However, some exceptions may exists in the CXI
            documentation (See Fig 11 vs Fig 12).

            Additionally, not all :ref:`NXdetector` dependencies are inherited from AreaDetector or other control systems. ``frame_time`` is used to
            convert ``delay_difference`` to seconds.  ``frame_time`` field could be missing from AreaDetector or may
            either be `acquire_period` or `acquire_time`, depending on the detector model and the local implementation.

            .. [#] Coherent X-ray Imaging Data Bank: https://cxidb.org/cxi.html

        .. _/NXxpcs/entry/instrument/DETECTOR/description-field:

        .. index:: description (field)

        **description**: (optional) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXdetector/description-field>`

          Detector name.

        .. _/NXxpcs/entry/instrument/DETECTOR/distance-field:

        .. index:: distance (field)

        **distance**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

          Distance between sample and detector.

        .. _/NXxpcs/entry/instrument/DETECTOR/count_time-field:

        .. index:: count_time (field)

        **count_time**: (required) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_TIME <NX_TIME>`} :ref:`⤆ </NXdetector/count_time-field>`

          Exposure time of frames, s.

        .. _/NXxpcs/entry/instrument/DETECTOR/frame_time-field:

        .. index:: frame_time (field)

        **frame_time**: (required) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_TIME <NX_TIME>`} 

          Exposure period (time between frame starts) of frames, s

        .. _/NXxpcs/entry/instrument/DETECTOR/beam_center_x-field:

        .. index:: beam_center_x (field)

        **beam_center_x**: (required) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

          Position of beam center, x axis, in detector's coordinates.

        .. _/NXxpcs/entry/instrument/DETECTOR/beam_center_y-field:

        .. index:: beam_center_y (field)

        **beam_center_y**: (required) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

          Position of beam center, y axis, in detector's coordinates.

        .. _/NXxpcs/entry/instrument/DETECTOR/x_pixel_size-field:

        .. index:: x_pixel_size (field)

        **x_pixel_size**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

          Length of pixel in x direction.

        .. _/NXxpcs/entry/instrument/DETECTOR/y_pixel_size-field:

        .. index:: y_pixel_size (field)

        **y_pixel_size**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

          Length of pixel in y direction.

      .. _/NXxpcs/entry/instrument/masks-group:

      **masks**: (optional) :ref:`NXnote` 

        .. collapse:: Data masks or mappings to regions of interest (roi) for specific :math:`Q` ...

            Data masks or mappings to regions of interest (roi) for specific :math:`Q` values

            Fields in this ``masks`` group describe regions of interest
            in the data by either a mask to select pixels or to associate
            a *map* of rois with a (one-dimensional) *list* of values.

            "roi_maps" provide for representation of pixel binning that are arbitrary and irregular,
            which is geometry scattering agnostic and most flexible. The maps work as a labeled array for N rois.

            "Dynamic" represents quantities directly related to XPCS and NXxcps/entry/data and
            NXxpcs/entry/two_time.

            "Static" refers to finer binning used for computation not strictly used for the final
            XPCS results. Implementation of _static_ binning is left for individual libraries to
            document.  We encourage usage of :ref:`NXcanSAS` to represent standard SAXS results or
            development of new NeXus definitions for GI-SAXS or other reciprocal space
            intensity mapping.

        .. _/NXxpcs/entry/instrument/masks/dynamic_roi_map-field:

        .. index:: dynamic_roi_map (field)

        **dynamic_roi_map**: (required) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

          .. collapse:: roi index array or labeled array ...

              roi index array or labeled array

              The values of this mask index (or map to) the :math:`Q` value from the
              the ``dynamic_q_list`` field. Not that the value of ``0`` represents in-action. XPCS computations
              are performed on all pixels with a value > 0.

              The ``units`` attribute should be set to ``"au"``
              indicating arbitrary units.

        .. _/NXxpcs/entry/instrument/masks/dynamic_q_list-field:

        .. index:: dynamic_q_list (field)

        **dynamic_q_list**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_PER_LENGTH <NX_PER_LENGTH>`} 

          .. collapse:: 1-D list of :math:`Q` values, one for each roi index value. ...

              1-D list of :math:`Q` values, one for each roi index value.

              List order is determined by the index value of the associated roi map starting at ``1``.

              The only requirement for the list is that it may be iterable. Some expected formats are:

              * iterable list of floats (i.e., :math:`Q(r)`)
              * iterable list of tuples (i.e., :math:`Q(r)`, :math:`\varphi`), but preferable use the seperate :math:`\varphi` field below
              * iterable list of tuples (e.g., (H, K, L); (qx, qy, qz); (horizontal_pixel, vertical_pixel))
              * iterable list of integers (for Nth roi_map value) or strings

              This format is chosen because results plotting packages are not common and simple I/O is required by end user.
              The lists can be accessed as lists, arrays or via keys

        .. _/NXxpcs/entry/instrument/masks/dynamic_phi_list-field:

        .. index:: dynamic_phi_list (field)

        **dynamic_phi_list**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_PER_LENGTH <NX_PER_LENGTH>`} 

          .. collapse:: Array of :math:`\varphi` value for each pixel. ...

              Array of :math:`\varphi` value for each pixel.

              List order is determined by the index value of the associated roi map starting at ``1``.

        .. _/NXxpcs/entry/instrument/masks/static_roi_map-field:

        .. index:: static_roi_map (field)

        **static_roi_map**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

          .. collapse:: roi index array. ...

              roi index array.

              The values of this mask index the :math:`|Q|` value from the
              the ``static_q_list`` field.

              The ``units`` attribute should be set to ``"au"``
              indicating arbitrary units.

        .. _/NXxpcs/entry/instrument/masks/static_q_list-field:

        .. index:: static_q_list (field)

        **static_q_list**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_PER_LENGTH <NX_PER_LENGTH>`} 

          1-D list of :math:`|Q|` values, 1 for each roi.

    .. _/NXxpcs/entry/sample-group:

    **sample**: (optional) :ref:`NXsample` :ref:`⤆ </NXentry/SAMPLE-group>`


      .. _/NXxpcs/entry/sample/temperature_set-field:

      .. index:: temperature_set (field)

      **temperature_set**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_TEMPERATURE <NX_TEMPERATURE>`} 

        Sample temperature setpoint, (C or K).

      .. _/NXxpcs/entry/sample/temperature-field:

      .. index:: temperature (field)

      **temperature**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_TEMPERATURE <NX_TEMPERATURE>`} 

        Sample temperature actual, (C or K).

      .. _/NXxpcs/entry/sample/position_x-group:

      **position_x**: (optional) :ref:`NXpositioner` :ref:`⤆ </NXsample/POSITIONER-group>`


      .. _/NXxpcs/entry/sample/position_y-group:

      **position_y**: (optional) :ref:`NXpositioner` :ref:`⤆ </NXsample/POSITIONER-group>`


      .. _/NXxpcs/entry/sample/position_z-group:

      **position_z**: (optional) :ref:`NXpositioner` :ref:`⤆ </NXsample/POSITIONER-group>`


    .. _/NXxpcs/entry/NOTE-group:

    **NOTE**: (optional) :ref:`NXnote` 

      .. collapse:: Any other notes. ...

          Any other notes.

          NAME: The NeXus convention, to use all upper case
          to indicate the name (here ``NOTE``), is left to the file
          writer.  In our case, follow the suggested name
          pattern and sequence: note_1, note_2, note_3, ...
          Start with ``note_1`` if the first one, otherwise
          pick the next number in this sequence.

  .. _/NXxpcs/PROCESS-group:

  **PROCESS**: (required) :ref:`NXprocess` 

    Describe the computation process that produced these results.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXxpcs/entry-group </NXxpcs/entry-group>`
* :ref:`/NXxpcs/entry/data-group </NXxpcs/entry/data-group>`
* :ref:`/NXxpcs/entry/data/delay_difference-field </NXxpcs/entry/data/delay_difference-field>`
* :ref:`/NXxpcs/entry/data/delay_difference@storage_mode-attribute </NXxpcs/entry/data/delay_difference@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/data/frame_average-field </NXxpcs/entry/data/frame_average-field>`
* :ref:`/NXxpcs/entry/data/frame_sum-field </NXxpcs/entry/data/frame_sum-field>`
* :ref:`/NXxpcs/entry/data/g2-field </NXxpcs/entry/data/g2-field>`
* :ref:`/NXxpcs/entry/data/g2@storage_mode-attribute </NXxpcs/entry/data/g2@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/data/g2_derr-field </NXxpcs/entry/data/g2_derr-field>`
* :ref:`/NXxpcs/entry/data/g2_derr@storage_mode-attribute </NXxpcs/entry/data/g2_derr@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/data/G2_unnormalized-field </NXxpcs/entry/data/G2_unnormalized-field>`
* :ref:`/NXxpcs/entry/data/G2_unnormalized@storage_mode-attribute </NXxpcs/entry/data/G2_unnormalized@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/definition-field </NXxpcs/entry/definition-field>`
* :ref:`/NXxpcs/entry/end_time-field </NXxpcs/entry/end_time-field>`
* :ref:`/NXxpcs/entry/entry_identifier-field </NXxpcs/entry/entry_identifier-field>`
* :ref:`/NXxpcs/entry/entry_identifier_uuid-field </NXxpcs/entry/entry_identifier_uuid-field>`
* :ref:`/NXxpcs/entry/instrument-group </NXxpcs/entry/instrument-group>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR-group </NXxpcs/entry/instrument/DETECTOR-group>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/beam_center_x-field </NXxpcs/entry/instrument/DETECTOR/beam_center_x-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/beam_center_y-field </NXxpcs/entry/instrument/DETECTOR/beam_center_y-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/count_time-field </NXxpcs/entry/instrument/DETECTOR/count_time-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/description-field </NXxpcs/entry/instrument/DETECTOR/description-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/distance-field </NXxpcs/entry/instrument/DETECTOR/distance-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/frame_time-field </NXxpcs/entry/instrument/DETECTOR/frame_time-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/x_pixel_size-field </NXxpcs/entry/instrument/DETECTOR/x_pixel_size-field>`
* :ref:`/NXxpcs/entry/instrument/DETECTOR/y_pixel_size-field </NXxpcs/entry/instrument/DETECTOR/y_pixel_size-field>`
* :ref:`/NXxpcs/entry/instrument/incident_beam-group </NXxpcs/entry/instrument/incident_beam-group>`
* :ref:`/NXxpcs/entry/instrument/incident_beam/extent-field </NXxpcs/entry/instrument/incident_beam/extent-field>`
* :ref:`/NXxpcs/entry/instrument/incident_beam/incident_energy-field </NXxpcs/entry/instrument/incident_beam/incident_energy-field>`
* :ref:`/NXxpcs/entry/instrument/incident_beam/incident_energy_spread-field </NXxpcs/entry/instrument/incident_beam/incident_energy_spread-field>`
* :ref:`/NXxpcs/entry/instrument/incident_beam/incident_polarization_type-field </NXxpcs/entry/instrument/incident_beam/incident_polarization_type-field>`
* :ref:`/NXxpcs/entry/instrument/masks-group </NXxpcs/entry/instrument/masks-group>`
* :ref:`/NXxpcs/entry/instrument/masks/dynamic_phi_list-field </NXxpcs/entry/instrument/masks/dynamic_phi_list-field>`
* :ref:`/NXxpcs/entry/instrument/masks/dynamic_q_list-field </NXxpcs/entry/instrument/masks/dynamic_q_list-field>`
* :ref:`/NXxpcs/entry/instrument/masks/dynamic_roi_map-field </NXxpcs/entry/instrument/masks/dynamic_roi_map-field>`
* :ref:`/NXxpcs/entry/instrument/masks/static_q_list-field </NXxpcs/entry/instrument/masks/static_q_list-field>`
* :ref:`/NXxpcs/entry/instrument/masks/static_roi_map-field </NXxpcs/entry/instrument/masks/static_roi_map-field>`
* :ref:`/NXxpcs/entry/NOTE-group </NXxpcs/entry/NOTE-group>`
* :ref:`/NXxpcs/entry/sample-group </NXxpcs/entry/sample-group>`
* :ref:`/NXxpcs/entry/sample/position_x-group </NXxpcs/entry/sample/position_x-group>`
* :ref:`/NXxpcs/entry/sample/position_y-group </NXxpcs/entry/sample/position_y-group>`
* :ref:`/NXxpcs/entry/sample/position_z-group </NXxpcs/entry/sample/position_z-group>`
* :ref:`/NXxpcs/entry/sample/temperature-field </NXxpcs/entry/sample/temperature-field>`
* :ref:`/NXxpcs/entry/sample/temperature_set-field </NXxpcs/entry/sample/temperature_set-field>`
* :ref:`/NXxpcs/entry/scan_number-field </NXxpcs/entry/scan_number-field>`
* :ref:`/NXxpcs/entry/start_time-field </NXxpcs/entry/start_time-field>`
* :ref:`/NXxpcs/entry/twotime-group </NXxpcs/entry/twotime-group>`
* :ref:`/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func-field </NXxpcs/entry/twotime/g2_err_from_two_time_corr_func-field>`
* :ref:`/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func@storage_mode-attribute </NXxpcs/entry/twotime/g2_err_from_two_time_corr_func@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/twotime/g2_err_from_two_time_corr_func_partials-field </NXxpcs/entry/twotime/g2_err_from_two_time_corr_func_partials-field>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func-field </NXxpcs/entry/twotime/g2_from_two_time_corr_func-field>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func@baseline_reference-attribute </NXxpcs/entry/twotime/g2_from_two_time_corr_func@baseline_reference-attribute>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func@first_point_for_fit-attribute </NXxpcs/entry/twotime/g2_from_two_time_corr_func@first_point_for_fit-attribute>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func@storage_mode-attribute </NXxpcs/entry/twotime/g2_from_two_time_corr_func@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials-field </NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials-field>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@baseline_reference-attribute </NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@baseline_reference-attribute>`
* :ref:`/NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@storage_mode-attribute </NXxpcs/entry/twotime/g2_from_two_time_corr_func_partials@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/twotime/two_time_corr_func-field </NXxpcs/entry/twotime/two_time_corr_func-field>`
* :ref:`/NXxpcs/entry/twotime/two_time_corr_func@baseline_reference-attribute </NXxpcs/entry/twotime/two_time_corr_func@baseline_reference-attribute>`
* :ref:`/NXxpcs/entry/twotime/two_time_corr_func@populated_elements-attribute </NXxpcs/entry/twotime/two_time_corr_func@populated_elements-attribute>`
* :ref:`/NXxpcs/entry/twotime/two_time_corr_func@storage_mode-attribute </NXxpcs/entry/twotime/two_time_corr_func@storage_mode-attribute>`
* :ref:`/NXxpcs/entry/twotime/two_time_corr_func@time_origin_location-attribute </NXxpcs/entry/twotime/two_time_corr_func@time_origin_location-attribute>`
* :ref:`/NXxpcs/PROCESS-group </NXxpcs/PROCESS-group>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/contributed_definitions/NXxpcs.nxdl.xml
